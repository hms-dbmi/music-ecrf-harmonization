return_rxnorm_desc <- function(RXNORM_DESCRIPTIONS) {
if (length(unique(RXNORM_DESCRIPTIONS)) > 5) {
return('greater than 5 RXNORM codes mapped to BCH code')
} else {
return(tolower(paste(unique(RXNORM_DESCRIPTIONS), collapse = ', ')))
}
}
# summarize music patient data for each concept
patient_observation_summary <- misc_meds %>%
group_by(CONCEPT_CD, `MED:ROUTE` ) %>%
summarise(distinct_patients = length(unique(PATIENT_NUM)),
distinct_observations = n())
View(patient_observation_summary)
misc_meds_info <- left_join( misc_meds_info, patient_observation_summary )
medClass <- meds_auto[, c("Code", "Class")]
misc_meds_info <- left_join(misc_meds_info, medClass, by = c('ECRF_CODE' = 'Code'))
bch_med_concept_summary <- misc_meds_info %>%
group_by(CONCEPT_CD, BCH_CONCEPT_PATH, BCH_NAME_CHAR, TVAL_CHAR) %>%
summarise(ECRF_CODE = ECRF_CODE,
ECRF_GENERIC_NAME = ECRF_GENERIC_NAME,
ECRF_TRADE_NAMES = ECRF_TRADE_NAMES,
ECRF_CLASS = Class,
RXNORM_CODES = return_rxnorm_code(RXNORM_CODE),
RXNORM_DESCS = return_rxnorm_desc(RXNORM_DESCRIPTION),
min_date = min( dmy( med_date ) ),
max_date = max( dmy( med_date ) ),
distinct_patients = distinct_patients,
distinct_observations = distinct_observations,
pat_ids = paste0(unique(PATIENT_NUM), collapse = ','))
bch_med_concept_summary <- misc_meds_info %>%
group_by(CONCEPT_CD, BCH_CONCEPT_PATH, BCH_NAME_CHAR, `MED_ROUTE`) %>%
summarise(ECRF_CODE = ECRF_CODE,
ECRF_GENERIC_NAME = ECRF_GENERIC_NAME,
ECRF_TRADE_NAMES = ECRF_TRADE_NAMES,
ECRF_CLASS = Class,
RXNORM_CODES = return_rxnorm_code(RXNORM_CODE),
RXNORM_DESCS = return_rxnorm_desc(RXNORM_DESCRIPTION),
min_date = min( dmy( med_date ) ),
max_date = max( dmy( med_date ) ),
distinct_patients = distinct_patients,
distinct_observations = distinct_observations,
pat_ids = paste0(unique(PATIENT_NUM), collapse = ','))
bch_med_concept_summary <- misc_meds_info %>%
group_by(CONCEPT_CD, BCH_CONCEPT_PATH, BCH_NAME_CHAR, `MED:ROUTE`) %>%
summarise(ECRF_CODE = ECRF_CODE,
ECRF_GENERIC_NAME = ECRF_GENERIC_NAME,
ECRF_TRADE_NAMES = ECRF_TRADE_NAMES,
ECRF_CLASS = Class,
RXNORM_CODES = return_rxnorm_code(RXNORM_CODE),
RXNORM_DESCS = return_rxnorm_desc(RXNORM_DESCRIPTION),
min_date = min( dmy( med_date ) ),
max_date = max( dmy( med_date ) ),
distinct_patients = distinct_patients,
distinct_observations = distinct_observations,
pat_ids = paste0(unique(PATIENT_NUM), collapse = ','))
# reorganize and rename columns
bch_med_concept_summary <- bch_med_concept_summary %>%
mutate(eCRF_name = 'medcations_before_and_after',
BCH_NAME_CHAR = tolower(BCH_NAME_CHAR)) %>%
rename('BCH_CONCEPT_DESCRIPTION' = 'BCH_NAME_CHAR',
'MEDICATION_ROUTE' = `MED:ROUTE`) %>%
select(eCRF_name, ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES, ECRF_CLASS,
RXNORM_CODES, RXNORM_DESCS,
CONCEPT_CD, BCH_CONCEPT_PATH, BCH_CONCEPT_DESCRIPTION, MEDICATION_ROUTE,  min_date, max_date, distinct_patients, distinct_observations, pat_ids) %>%
arrange(ECRF_CODE) %>%
unique() # there are still some duplicated rows ....
View(bch_med_concept_summary)
incorrect_mappings <- read_csv('../data/incorrect_mappings_eCRF_to_BCH.csv')
bch_med_concept_summary <- bch_med_concept_summary %>%
filter(!paste0(ECRF_CODE, '-', CONCEPT_CD) %in% paste0(incorrect_mappings$ECRF_CODE, '-', incorrect_mappings$CONCEPT_CD))
med_route <- read.csv('../data/MED_ROUTE.csv')
bch_med_concept_summary <- left_join(bch_med_concept_summary, med_route, by = c('MEDICATION_ROUTE' = 'MED.ROUTE.values')) %>%
rename('MEDICATION_ROUTE_DESC' = 'Meaning') %>%
select(c(1:11), MEDICATION_ROUTE_DESC, c(12:16))
View(bch_med_concept_summary)
bch_med_concept_summary <- bch_med_concept_summary %>% ungroup() %>% select(-BCH_CONCEPT_PATH)
bch_med_concept_summary <- bch_med_concept_summary %>% distinct()
# function to calculate number of unique patient ids across multiple concepts
calc_n_unique_pids <- function(pids) {
combined <- paste0(pids, collapse = ',')
combined_unique <- unique(str_split(combined, ',')[[1]])
return(length(combined_unique))
}
# generate eCRF summary based on filtered mapping
ecrf_med_concept_summary <- bch_med_concept_summary %>%
ungroup() %>%
group_by(ECRF_CODE) %>%
summarise(min_date = min(min_date),
max_date = max(max_date),
distinct_patients = calc_n_unique_pids(pat_ids),
distinct_observations = sum(distinct_observations),
distinct_concepts = n_distinct(CONCEPT_CD))
# join the summary with eCRF, RXNORM, and BCH code mapping info
ecrf_med_concept_summary <- left_join(ecrf_med_concept_summary,
rxnorm_to_bch %>% select(ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES) %>% unique(),
by = 'ECRF_CODE')
# reorganize and rename columns
ecrf_med_concept_summary <- ecrf_med_concept_summary %>%
mutate(eCRF_name = 'medications_before_and_after_hosp') %>%
select(eCRF_name, ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES,
min_date, max_date, distinct_patients, distinct_observations, distinct_concepts) %>%
arrange(ECRF_CODE)
# add the ecrf codes for which we have no information
meds_missing <- meds_auto %>%
dplyr::filter( ! Code %in% ecrf_med_concept_summary$ECRF_CODE) %>%
dplyr::mutate( eCRF_name = "medications_before_and_after_hosp",
ECRF_CODE = Code,
ECRF_GENERIC_NAME = Generic.Name) %>%
dplyr::select( eCRF_name, ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES)
# add the missing codes at the end of ecrf_med_concept_summary
ecrf_med_concept_summary <- rbindlist( list( ecrf_med_concept_summary, meds_missing), fill = TRUE )
View(ecrf_med_concept_summary)
table(misc_meds_info$`MED:ROUTE`)
bch_med_concept_summary <- misc_meds_info %>%
group_by(CONCEPT_CD, BCH_CONCEPT_PATH, BCH_NAME_CHAR, `MED:ROUTE`) %>%
summarise(ECRF_CODE = ECRF_CODE,
ECRF_GENERIC_NAME = ECRF_GENERIC_NAME,
ECRF_TRADE_NAMES = ECRF_TRADE_NAMES,
ECRF_CLASS = Class,
RXNORM_CODES = return_rxnorm_code(RXNORM_CODE),
RXNORM_DESCS = return_rxnorm_desc(RXNORM_DESCRIPTION),
min_date = min( dmy( med_date ) ),
max_date = max( dmy( med_date ) ),
distinct_patients = distinct_patients,
distinct_observations = distinct_observations,
pat_ids = paste0(unique(PATIENT_NUM), collapse = ','))
table(bch_med_concept_summary$`MED:ROUTE`)
# reorganize and rename columns
bch_med_concept_summary <- bch_med_concept_summary %>%
mutate(eCRF_name = 'medcations_before_and_after',
BCH_NAME_CHAR = tolower(BCH_NAME_CHAR)) %>%
rename('BCH_CONCEPT_DESCRIPTION' = 'BCH_NAME_CHAR',
'MEDICATION_ROUTE' = `MED:ROUTE`) %>%
select(eCRF_name, ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES, ECRF_CLASS,
RXNORM_CODES, RXNORM_DESCS,
CONCEPT_CD, BCH_CONCEPT_PATH, BCH_CONCEPT_DESCRIPTION, MEDICATION_ROUTE,  min_date, max_date, distinct_patients, distinct_observations, pat_ids) %>%
arrange(ECRF_CODE) %>%
unique() # there are still some duplicated rows ....
table(bch_med_concept_summary$`MED:ROUTE`)
table(bch_med_concept_summary$MEDICATION_ROUTE)
View(misc_meds)
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR, values_fill = NA) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR, values_fill = NA) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
table(misc_meds$`MED:ROUTE`)
sum(is.na(misc_meds$`MED:ROUTE`)
)
?values_fill
?pivot_wider
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR, values_fill = "NOT AVAILABLE") %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR, values_fill = "NOT AVAILABLE") %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR, values_fill = c("NOT AVAILABLE")) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR, values_fill = c("NOT AVAILABLE")) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
test <- misc_meds %>% group_by(PATIENT_NUM, CONCEPT_CD) %>% summarise(has_route = "MED:ROUTE" %in% `MODIFIER_CD`)
View(test)
pid <- 'A75C4588-0FEA-2EC3-E053-DC90240ABE72'
pid <_ 'A75C4588-0FEA-2EC3-E053-DC90240ABE72
cd <-
'AG:26937460'
test2 <- test %>% filter(!test$has_route)
test2 <- test %>% filter(!has_route)
View(test2)
View(test2)
sub <- misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460')
View(sub)
sub <- misc_meds %>% filter(PATIENT_NUM %in% c('A75C4588-0FEA-2EC3-E053-DC90240ABE72', pid), CONCEPT_CD %in% c('AG:26937460', cd))
View(sub)
sub <- misc_meds %>% filter(PATIENT_NUM %in% c('A75C4588-0FEA-2EC3-E053-DC90240ABE72', 'A75C4588-0FEA-2EC3-E053-DC90240ABE72'), CONCEPT_CD %in% c('AG:26937460', 'ADMINMED:2799024'))
View(sub)
sub2 <- pivot_wider(sub, names_from = MODIFIER_CD, values_from = TVAL_CHAR)
View(sub2)
n_distinct(sub$START_DATE)
table(sub2$`MED:ROUTE`)
sum(is.na(sub2$`MED:ROUTE`))
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
sum(is.na(misc_meds$`MED:ROUTE`))
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR, values_fn = list, values_fill = NA) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds, names_from = MODIFIER_CD, values_from = TVAL_CHAR, values_fn = list, values_fill = NA) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
sum(is.na(misc_meds$`MED:ROUTE`))
colnames(misc_meds)
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fn = list,
values_fill = NA) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
sum(is.na(misc_meds$`MED:ROUTE`))
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
#test <- misc_meds %>% group_by(PATIENT_NUM, CONCEPT_CD) %>% summarise(has_route = "MED:ROUTE" %in% `MODIFIER_CD`)
#test2 <- test %>% filter(!has_route)
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fn = list,
values_fill = NA)
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
#test <- misc_meds %>% group_by(PATIENT_NUM, CONCEPT_CD) %>% summarise(has_route = "MED:ROUTE" %in% `MODIFIER_CD`)
#test2 <- test %>% filter(!has_route)
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fn = list,
values_fill = NA)
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
#values_fn = list,
values_fill = NA) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
#values_fn = list,
values_fill = NA) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
sum(is.na(misc_meds$`MED:ROUTE`))
table(misc_meds$`MED:ROUTE`)
pid <- 'AD2E4460-58FD-6A9C-E053-DC90240A7080'
cd <- 'ADMINMED:2797923'
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
one <- misc_meds %>% filter(PATIENT_NUM == pid, CONCEPT_CD == cd)
View(one)
View(sub)
misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
#values_fn = list,
values_fill = NA) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460')
?pivot_wider
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460')
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460')
pivot_wider(misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460'),
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')
pivot_wider(misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460'),
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list)
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE')   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list)
misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460')
misc_meds %>% unnest(cols = 'MED_ROUTE') %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460')
?unnest
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE', keep_empty = TRUE)   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE', keep_empty = TRUE)   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
misc_meds %>% filter(PATIENT_NUM == 'A75C4588-0FEA-2EC3-E053-DC90240ABE72', CONCEPT_CD == 'AG:26937460')
library(dplyr)
library(lubridate)
library(tidyverse)
library(data.table)
ecrf_to_rxnorm <- read_csv('../data/ecrf_to_rxnorm_mapping.csv', col_types = cols(
ECRF_CODE = col_character(),
ECRF_GENERIC_NAME = col_character(),
RXNORM_CODE = col_character(),
RXNORM_DESCRIPTION = col_character()
))
bchmapping <- read.csv("../data/MedicationsMapBCH.csv")
length(unique(bchmapping$ACT_CONCEPT_CD))
length(unique(bchmapping$BCH_CONCEPT_CD))
bchmapping$RXNORM_CODE <- sapply(strsplit( as.character(bchmapping$ACT_CONCEPT_CD), "RXNORM:"), '[', 2)
rxnorm_to_bch <- inner_join( ecrf_to_rxnorm, bchmapping, by="RXNORM_CODE")
length( unique( rxnorm_to_bch$ECRF_CODE))
length( unique( rxnorm_to_bch$RXNORM_CODE))
length( unique( rxnorm_to_bch$BCH_CONCEPT_CD))
meds_auto <- read_csv('../data/meds_auto.csv')
rxnorm_to_bch <- inner_join( ecrf_to_rxnorm, bchmapping, by="RXNORM_CODE")
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE', keep_empty = TRUE)   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# filter MISC patient medication data to concepts that we have identified as potential matches for the eCRF variables
# filter out duplicated rows
misc_meds <- misc_meds %>%
dplyr::filter( CONCEPT_CD %in%  rxnorm_to_bch$BCH_CONCEPT_CD ) %>%
distinct()
# create misc_meds_info, which combines the MISC patient medication data with identified BCH and RXNORM codes for each eCRF variable
misc_meds_info <- misc_meds %>%
dplyr::left_join( rxnorm_to_bch, by=c("CONCEPT_CD"="BCH_CONCEPT_CD"))
length(unique(misc_meds_info$ECRF_CODE))
length(unique(misc_meds_info$CONCEPT_CD))
misc_meds_info$med_date <- sapply(strsplit( as.character(misc_meds_info$START_DATE), "[ ]"), '[', 1)
misc_meds_info$misc_start_date <- sapply(strsplit( as.character(misc_meds_info$ADMISSIONDATE), "[ ]"), '[', 1)
misc_meds_info$misc_end_date <- sapply(strsplit( as.character(misc_meds_info$END_DATE), "[ ]"), '[', 1)
misc_meds_info$when <- ifelse( dmy( misc_meds_info$med_date ) < dmy( misc_meds_info$misc_start_date), "before", ifelse( dmy( misc_meds_info$med_date) > dmy( misc_meds_info$misc_end_date), "after", "during"))
misc_meds_info$prefix <- sapply(strsplit( as.character(misc_meds_info$CONCEPT_CD), "[:]"), '[', 1)
during <- misc_meds_info %>%
dplyr::filter( when == "during")
summary( as.factor( during$prefix))
before_after <- misc_meds_info %>%
dplyr::filter( when != "during")
summary( as.factor( before_after$prefix))
# function for returning RXNORM codes list
# return the list of relevant RXNORM codes; if the list is greater than 5, return 'greater than 5 RXNORM codes mapped'
return_rxnorm_code <- function(RXNORM_CODES) {
if (length(unique(RXNORM_CODES)) > 5) {
return('greater than 5 RXNORM codes mapped to BCH code')
} else {
return(paste(unique(RXNORM_CODES), collapse = ', '))
}
}
return_rxnorm_desc <- function(RXNORM_DESCRIPTIONS) {
if (length(unique(RXNORM_DESCRIPTIONS)) > 5) {
return('greater than 5 RXNORM codes mapped to BCH code')
} else {
return(tolower(paste(unique(RXNORM_DESCRIPTIONS), collapse = ', ')))
}
}
# summarize music patient data for each concept
patient_observation_summary <- misc_meds %>%
group_by(CONCEPT_CD, `MED:ROUTE` ) %>%
summarise(distinct_patients = length(unique(PATIENT_NUM)),
distinct_observations = n())
misc_meds_info <- left_join( misc_meds_info, patient_observation_summary )
medClass <- meds_auto[, c("Code", "Class")]
misc_meds_info <- left_join(misc_meds_info, medClass, by = c('ECRF_CODE' = 'Code'))
bch_med_concept_summary <- misc_meds_info %>%
group_by(CONCEPT_CD, BCH_CONCEPT_PATH, BCH_NAME_CHAR, `MED:ROUTE`) %>%
summarise(ECRF_CODE = ECRF_CODE,
ECRF_GENERIC_NAME = ECRF_GENERIC_NAME,
ECRF_TRADE_NAMES = ECRF_TRADE_NAMES,
ECRF_CLASS = Class,
RXNORM_CODES = return_rxnorm_code(RXNORM_CODE),
RXNORM_DESCS = return_rxnorm_desc(RXNORM_DESCRIPTION),
min_date = min( dmy( med_date ) ),
max_date = max( dmy( med_date ) ),
distinct_patients = distinct_patients,
distinct_observations = distinct_observations,
pat_ids = paste0(unique(PATIENT_NUM), collapse = ','))
# reorganize and rename columns
bch_med_concept_summary <- bch_med_concept_summary %>%
mutate(eCRF_name = 'medcations_before_and_after',
BCH_NAME_CHAR = tolower(BCH_NAME_CHAR)) %>%
rename('BCH_CONCEPT_DESCRIPTION' = 'BCH_NAME_CHAR',
'MEDICATION_ROUTE' = `MED:ROUTE`) %>%
select(eCRF_name, ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES, ECRF_CLASS,
RXNORM_CODES, RXNORM_DESCS,
CONCEPT_CD, BCH_CONCEPT_PATH, BCH_CONCEPT_DESCRIPTION, MEDICATION_ROUTE,  min_date, max_date, distinct_patients, distinct_observations, pat_ids) %>%
arrange(ECRF_CODE) %>%
unique() # there are still some duplicated rows ....
#write.csv(bch_med_concept_summary %>%
#            filter(RXNORM_CODES == 'greater than 5 RXNORM codes mapped to BCH code') %>%
#            select(ECRF_CODE, ECRF_GENERIC_NAME, CONCEPT_CD, BCH_CONCEPT_DESCRIPTION),
#          '../data/test.csv')
incorrect_mappings <- read_csv('../data/incorrect_mappings_eCRF_to_BCH.csv')
bch_med_concept_summary <- bch_med_concept_summary %>%
filter(!paste0(ECRF_CODE, '-', CONCEPT_CD) %in% paste0(incorrect_mappings$ECRF_CODE, '-', incorrect_mappings$CONCEPT_CD))
med_route <- read.csv('../data/MED_ROUTE.csv')
bch_med_concept_summary <- left_join(bch_med_concept_summary, med_route, by = c('MEDICATION_ROUTE' = 'MED.ROUTE.values')) %>%
rename('MEDICATION_ROUTE_DESC' = 'Meaning') %>%
select(c(1:11), MEDICATION_ROUTE_DESC, c(12:16))
View(bch_med_concept_summary)
bch_med_concept_summary <- bch_med_concept_summary %>% ungroup() %>% select(-BCH_CONCEPT_PATH)
bch_med_concept_summary <- bch_med_concept_summary %>% distinct()
# function to calculate number of unique patient ids across multiple concepts
calc_n_unique_pids <- function(pids) {
combined <- paste0(pids, collapse = ',')
combined_unique <- unique(str_split(combined, ',')[[1]])
return(length(combined_unique))
}
# generate eCRF summary based on filtered mapping
ecrf_med_concept_summary <- bch_med_concept_summary %>%
ungroup() %>%
group_by(ECRF_CODE) %>%
summarise(min_date = min(min_date),
max_date = max(max_date),
distinct_patients = calc_n_unique_pids(pat_ids),
distinct_observations = sum(distinct_observations),
distinct_concepts = n_distinct(CONCEPT_CD))
# join the summary with eCRF, RXNORM, and BCH code mapping info
ecrf_med_concept_summary <- left_join(ecrf_med_concept_summary,
rxnorm_to_bch %>% select(ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES) %>% unique(),
by = 'ECRF_CODE')
# reorganize and rename columns
ecrf_med_concept_summary <- ecrf_med_concept_summary %>%
mutate(eCRF_name = 'medications_before_and_after_hosp') %>%
select(eCRF_name, ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES,
min_date, max_date, distinct_patients, distinct_observations, distinct_concepts) %>%
arrange(ECRF_CODE)
# add the ecrf codes for which we have no information
meds_missing <- meds_auto %>%
dplyr::filter( ! Code %in% ecrf_med_concept_summary$ECRF_CODE) %>%
dplyr::mutate( eCRF_name = "medications_before_and_after_hosp",
ECRF_CODE = Code,
ECRF_GENERIC_NAME = Generic.Name) %>%
dplyr::select( eCRF_name, ECRF_CODE, ECRF_GENERIC_NAME, ECRF_TRADE_NAMES)
# add the missing codes at the end of ecrf_med_concept_summary
ecrf_med_concept_summary <- rbindlist( list( ecrf_med_concept_summary, meds_missing), fill = TRUE )
View(ecrf_med_concept_summary)
library(dplyr)
library(lubridate)
library(tidyverse)
library(data.table)
ecrf_to_rxnorm <- read_csv('../data/ecrf_to_rxnorm_mapping.csv', col_types = cols(
ECRF_CODE = col_character(),
ECRF_GENERIC_NAME = col_character(),
RXNORM_CODE = col_character(),
RXNORM_DESCRIPTION = col_character()
))
bchmapping <- read.csv("../data/MedicationsMapBCH.csv")
length(unique(bchmapping$ACT_CONCEPT_CD))
length(unique(bchmapping$BCH_CONCEPT_CD))
bchmapping$RXNORM_CODE <- sapply(strsplit( as.character(bchmapping$ACT_CONCEPT_CD), "RXNORM:"), '[', 2)
rxnorm_to_bch <- inner_join( ecrf_to_rxnorm, bchmapping, by="RXNORM_CODE")
length( unique( rxnorm_to_bch$ECRF_CODE))
length( unique( rxnorm_to_bch$RXNORM_CODE))
length( unique( rxnorm_to_bch$BCH_CONCEPT_CD))
meds_auto <- read_csv('../data/meds_auto.csv')
rxnorm_to_bch <- inner_join( ecrf_to_rxnorm, bchmapping, by="RXNORM_CODE")
# load MISC patient medication data
misc_meds <- read.delim("../local_ref/music_patients_meds.dsv", sep = ',')
misc_meds <- pivot_wider(misc_meds,
id_cols = c(PATIENT_NUM, CONCEPT_CD, START_DATE, ADMISSIONDATE, END_DATE, LENGTH_OF_STAY),
names_from = MODIFIER_CD,
values_from = TVAL_CHAR,
values_fill = NA,
values_fn = list) %>%  # pivot df so that each MODIFIER value is a column
unnest(cols = 'MED:ROUTE', keep_empty = TRUE)   # in cases where there are multiple routes assigned to the same patient / medication / time, separate these into distinct rows
# filter MISC patient medication data to concepts that we have identified as potential matches for the eCRF variables
# filter out duplicated rows
misc_meds <- misc_meds %>%
dplyr::filter( CONCEPT_CD %in%  rxnorm_to_bch$BCH_CONCEPT_CD ) %>%
distinct()
# create misc_meds_info, which combines the MISC patient medication data with identified BCH and RXNORM codes for each eCRF variable
misc_meds_info <- misc_meds %>%
dplyr::left_join( rxnorm_to_bch, by=c("CONCEPT_CD"="BCH_CONCEPT_CD"))
View(misc_meds)
View(misc_meds)
